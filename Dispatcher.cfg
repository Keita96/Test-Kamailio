src : https://nickvsnetworking.com/kamailio-dispatcher/

# Charge module dispatcher and  modparam
loadmodule "dispatcher.so"

modparam("dispatcher", "db_url", DBURL)                 #Use DBURL variable for database parameters
modparam("dispatcher", "ds_ping_interval", 10)          #How often to ping destinations to check status
modparam("dispatcher", "ds_ping_method", "OPTIONS")     #Send SIP Options ping
modparam("dispatcher", "ds_probing_threshold", 10)      #How many failed pings in a row do we need before we consider it down
modparam("dispatcher", "ds_inactive_threshold", 10)     #How many sucessful pings in a row do we need before considering it up
modparam("dispatcher", "ds_ping_latency_stats", 1)      #Enables stats on latency
modparam("dispatcher", "ds_probing_mode", 1)            #Keeps pinging gateways when state is known (to detect change in state)


### Comme le module des autorisations, le module du répartiteur a des groupes de destinations.

### Pour cet exemple, nous utiliserons le groupe de répartition 1, qui sera un groupe contenant nos passerelles multimédias, et les URI SIP sont sip: mg1: 5060 et sip: mg2: 5060

### Depuis le shell, nous utiliserons kamctl pour ajouter une nouvelle entrée de répartiteur.


    kamctl dispatcher add 1 sip:mg1:5060 0 0 '' 'Media Gateway 1'
    kamctl dispatcher add 1 sip:mg2:5060 0 0 '' 'Media Gateway 2' 
    
    
    ### You can use kamctl to show you the database entries:
    
        kamctl dispatcher show    
        
        
        
     ### Ensuite, nous vérifierons si nos passerelles sont en ligne, nous utiliserons kamcmd pour afficher l'état actuel des destinations:

                kamcmd dispatcher.list
                
                
## Une fois la maintenance terminée, nous pourrions la forcer à passer à l'état haut en remplaçant dx par ap.
## Il convient de noter que si vous redémarrez Kamailio ou rechargez le répartiteur, l'état de chaque destination est réinitialisé, 
## puis redémarre à partir d'AX et progresse vers AP (haut) ou IP (bas) en fonction de la réponse de la destination.
                
                
    
    
  ##Prenez note du champ FLAGS, il est actuellement défini sur AP, ce qui est bien, mais il y a quelques états:

AP - Sondage actif - La destination répond aux pings et est active
IP - Sondage inactif - La destination ne répond pas aux pings et est probablement inaccessible
DX - La destination est désactivée (administrativement vers le bas)
AX - On dirait qu'il est en hausse ou à venir, mais n'a pas encore atteint les seuils minimaux pour être considéré comme supérieur (ds_inactive_threshold)
TX - On dirait ou est en panne. A cessé de répondre aux pings mais n'a pas encore satisfait le nombre de ping échoués à l'état bas (ds_probing_threshold)

## Si nous ajoutons une destination supplémentaire maintenant, nous pouvons l'ajouter sans avoir à redémarrer Kamailio, en utilisant kamcmd:

    kamcmd dispatcher.reload
    
    
    ### Vous voudrez peut-être faire du travail sur l'une des passerelles multimédias et souhaitez la mettre hors ligne, pour cela, nous utilisons à nouveau kamcmd:
        
                    kamcmd dispatcher.set_state dx 1 gorgée: mg1: 5060


####### Routing Logic ########


/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {



        route(REQINIT);         #Call REQINIT (Request Initial) route to filter out the worst of the bad traffic and take care of the basics.


        if (is_method("CANCEL")) {
                if (t_check_trans()) {
                        route(RELAY);
                }
                exit;
        }


        if (!is_method("ACK")) {
                if(t_precheck_trans()) {
                        t_check_trans();
                        exit;
                }
                t_check_trans();
        }

        # handle requests within SIP dialogs
        route(WITHINDLG);

   if(method=="INVITE"){
                ds_select_dst(1, 12);
                t_on_failure("DISPATCH_FAILURE");
                #t_relay();
                route(RELAY);
        }

        xlog("No idea how to respond to method $rm");
        sl_reply("501", "Not Implemented");
}


route[DISPATCH_FAILURE]{
        xlog("Trying next destination");
        ds_next_dst();
        route(RELAY);

